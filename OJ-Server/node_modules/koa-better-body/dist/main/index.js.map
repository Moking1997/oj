{"version":3,"sources":["index.js"],"names":["koaBetterBody","options","opts","plugin","next","strict","method","err","onError"],"mappings":";;;;;;;AAOA;;AA4Be,SAASA,aAAT,CAAuBC,OAAvB,EAAgC;AAC7C,QAAMC,IAAI,GAAG,2BAAeD,OAAf,CAAb;AAGA,SAAO,UAAUE,MAAV,CAAiBC,IAAjB,EAAuB;AAC5B,QAAIF,IAAI,CAACG,MAAL,IAAe,CAAC,oBAAQ,KAAKC,MAAb,CAApB,EAA0C;AACxC,aAAO,OAAOF,IAAd;AACD;;AAED,QAAI;AACF,6BAAW,IAAX,EAAiBF,IAAjB;AACA,aAAO,sBAAU,IAAV,EAAgBA,IAAhB,EAAsBE,IAAtB,CAAP;AACD,KAHD,CAGE,OAAOG,GAAP,EAAY;AACZ,UAAI,CAACL,IAAI,CAACM,OAAV,EAAmB,MAAMD,GAAN;AACnBL,MAAAA,IAAI,CAACM,OAAL,CAAaD,GAAb,EAAkB,IAAlB;AACD;;AAED,WAAOH,IAAP;AACD,GAdD;AAeD","sourcesContent":["/*!\n * koa-better-body <https://github.com/tunnckoCore/koa-better-body>\n *\n * Copyright (c) 2014-2016 Charlike Mike Reagent <@tunnckoCore> (http://www.tunnckocore.tk)\n * Released under the MIT license.\n */\n\nimport { defaultOptions, setParsers, isValid, parseBody } from './utils';\n\n/**\n * > Robust body parser for [koa][]@1, also works for `koa@2` (with deprecations).\n * Will also work for future `koa@3` with [koa-convert][].\n *\n * @example\n * var koa = require('koa')\n * var body = require('koa-better-body')\n * var app = koa()\n *\n * app\n *   .use(body())\n *   .use(function * () {\n *     console.log(this.request.body)    // if buffer or text\n *     console.log(this.request.files)   // if multipart or urlencoded\n *     console.log(this.request.fields)  // if json\n *   })\n *   .listen(8080, function () {\n *     console.log('koa server start listening on port 8080')\n *   })\n *\n * @name   koaBetterBody\n * @param  {object} `options` see more on [options section](#options)\n * @return {GeneratorFunction} - plugin for Koa\n * @api public\n */\n\nexport default function koaBetterBody(options) {\n  const opts = defaultOptions(options);\n\n  // eslint-disable-next-line consistent-return\n  return function* plugin(next) {\n    if (opts.strict && !isValid(this.method)) {\n      return yield* next;\n    }\n\n    try {\n      setParsers(this, opts);\n      yield* parseBody(this, opts, next);\n    } catch (err) {\n      if (!opts.onError) throw err;\n      opts.onError(err, this);\n    }\n\n    yield* next;\n  };\n}\n"]}